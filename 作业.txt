《课前训练》

需求：
编写一个简易的交互式员工信息录入程序，实现员工信息的插入、删除、修改、查询、遍历。具体要求为：
1、程序启动后是交互式运行的（类似shell，等待用户输入指令，然后完成对应的功能）
2、程序支持的指令名和参数格式自定，但必须支持下面几种类型：
（1）插入：支持添加新员工，员工信息包括：姓名（可重复）、工号（唯一）、入职时间、部门、职位；录入的员工信息不要求持久化（保存在内存即可）
（2）删除：支持根据工号，删除对应的员工及相关信息
（3）修改：支持修改已录入的员工信息（工号除外）
（4）查询：支持根据姓名或工号查询对应员工信息
（5）遍历：支持遍历打印所有已录入的员工信息
（6）帮助：支持打印输出各命令的用法、参数等提示信息
3、在不超过系统资源的前提下，不限制录入员工的数量
4、不允许使用现成的数据库软件

示例：
# ./employee_manager                          // 启动程序
# >> add 00001 Zhangsan                       // 在命令提示符后输入add指令，新增员工信息
# >> mod 00001 date:2022-05-11                // 在命令提示符后输入mod指令，修改员工的入职时间
# >> show 00001                               // 在命令提示符后输入show指令，程序打印出对应员工的所有信息
# name: Zhangshan
# date: 1995-03-11


《第一课作业》
要点：编码风格、代码健壮性
需求：
1、在课前训练作业的基础上，优化代码的编码风格，提高代码健壮性
2、新增功能需求：
（1）遍历员工信息时，支持按任意内容过滤（如只输出某部门的员工、只输出某职位的员工）和排序（如按照工号排序、按照入职时间排序）



《第二课作业》
要点：API设计，重构和解耦
需求：
1、在第一课作业的基础上，优化代码的API设计，实现用户交互接口（命令行参数解析等）和核心算法（员工信息存储和查询等）的功能解耦
2、将程序核心算法逻辑封装成一个动态链接库，提供给应用程序调用
3、对代码进行性能优化（如在员工数量很多时，如何提升插入、查询效率等）



《第三课作业》
要点：单元测试、工具使用
需求：
1、在第二课作业的基础上，给代码编写单元测试
2、通过执行单元测试用例，统计代码覆盖率，要求行覆盖率至少达到80%以上（越高越好）
